
/*
    Односвязный список.

    Алгоритмы:
        (done) Создание списка
        (done) Добавление элемента в конец списка
        (done) Добавление элемента в начало списка
        (done) Удаление конечного элемента списка
        (done)  Удаление начального элемента списка
        (done) Поиск элемента по заданному значению поля структуры
        (done) Добавление элемента после найденного
        (done) Удаление найденного элемента.
 
    Использовать указатели
*/

#include <iostream>
#include <vector>
#include <cstring>
#include <tuple>
using namespace std;

struct Data{
    int Registration;
    char Brand[20];
    int Mileage;
};

struct Node{
    Node *pNext;
    Data TempData;
};

class List{
    private:
        Node *head;
    public:
        List(){
            head = nullptr; 
        }


        void pushBack(Data Values)
        {
            Node *newNode = new Node;
            newNode->TempData = Values;
            newNode->pNext = nullptr;
            if (head == nullptr)
            {
                head = newNode;
            }
            else
            {
                for (Node *current = head;; current = current->pNext){
                    if (current->pNext == nullptr)
                    {
				        current->pNext = newNode;
				        break;
                    }
                }
            }
        }


        void pushFront (Data Values){
            Node *newNode = new Node;
            newNode->TempData = Values;

            newNode->pNext = head;
            head = newNode;
        }


        void popBack(){
            Node *current = head;
            Node *next = head;
            while(current->pNext != nullptr){
                next = current;
                current = current->pNext;
            }
            next->pNext = nullptr;
        }


        void popFront(){
            Node *current = head->pNext;
            head = current;
        }
        
        int SearchInts(int search){
            Node *current = head;

            int i = 0;
            while(current->pNext != NULL){
                int value = current->TempData.Registration;
                if (value == search){
                    break;
                }
                else{
                    i++;
                    current = current->pNext;
                }
            }
            return i;
        }


        void InsertAfterFound(int index, Data InsData){
            Node *current = head;
            Node *InsertNode = new Node;
            InsertNode->TempData = InsData;
            for (int i = 0; i < index; i++){
                current = current->pNext;
            }
            InsertNode->pNext = current->pNext;
            current->pNext = InsertNode;
        }


        void DeleteFound(int index){
            Node *current = head;
            Node *previous = head;
            if(index != 0){
                for (int i = 0; i < index; i++){
                    previous = current;
                    current = current->pNext;
                }
                previous->pNext = current->pNext;
            }
            else{
                head = current->pNext;
            }
        }


        vector <Data> PrintList(){
            vector <Data> temp;
            Node *current = head;
            while(current != nullptr)
            {
                Data ExitData = current->TempData;
                current = current->pNext;
                temp.push_back(ExitData);
            }
            return temp;
        }
};

int main()
{
    int choice;
    int index;
    Data TempData;
    List lst;
    
    cout << "Доступные операции:" << endl;
                cout << "  1. Вывести весь список" << endl;
                cout << "  2. Добавить запись в конец" << endl;
                cout << "  3. Добавить запись в начало" << endl;
                cout << "  4. Удалить последнюю запись" << endl;
                cout << "  5. Удалить первую запись" << endl;
                cout << "  6. Функции поиска" << endl;

    do {
        cout << "Введите необходимую операцию (1-8) или 0, чтобы вернуться к списку: ";
        cin >> choice;
        switch(choice){
            int index;
            case 0:
                cout << "Доступные операции:" << endl;
                cout << "  1. Вывести весь список" << endl;
                cout << "  2. Добавить запись в конец" << endl;
                cout << "  3. Добавить запись в начало" << endl;
                cout << "  4. Удалить последнюю запись" << endl;
                cout << "  5. Удалить первую запись" << endl;
                cout << "  6. Функции поиска" << endl;
                break;
            case 1:
                for (int i = 0; i < lst.PrintList().size(); i++){
                    TempData = lst.PrintList()[i];
                    cout << "   " << TempData.Registration << " " << TempData.Brand << " " << TempData.Mileage << endl;
                }
                break;
            case 2:
                cout << "   Регистрационный номер: "; cin >> TempData.Registration;
                cout << "   Марка: "; cin >> TempData.Brand;
                cout << "   Пробег: "; cin >> TempData.Mileage;
                lst.pushBack(TempData);
                break;
            case 3:
                cout << "   Регистрационный номер: "; cin >> TempData.Registration;
                cout << "   Марка: "; cin >> TempData.Brand;
                cout << "   Пробег: "; cin >> TempData.Mileage;
                lst.pushFront(TempData);
                break;
            case 4:
                lst.popBack();
                cout << "   Последний элемент удален." << endl;
                break;
            case 5:
                lst.popFront();
                cout << "   Первый элемент удален." << endl;
                break;
            case 6:
                int searchInt;
                int foundIndex;
                
                cout << "       Введите регистрационный номер: "; cin >> searchInt;
                foundIndex = lst.SearchInts(searchInt);
                cout << "   Задача выполнена. Выберите, что необходимо сделать дальше: " << endl;
                cout << "   Функции поиска:" << endl;
                cout << "     7. Добавить строку после найденной" << endl;
                cout << "     8. Удалить найденнуб строку" << endl;
                break;
            case 7:
                cout << "   Введите новую строку" << endl;
                cout << "   Регистрационный номер: "; cin >> TempData.Registration;
                cout << "   Марка: "; cin >> TempData.Brand;
                cout << "   Пробег:"; cin >> TempData.Mileage;
                lst.InsertAfterFound(foundIndex, TempData);
                break;
            case 8:
                lst.DeleteFound(foundIndex);
                cout << "       Deleted." << endl;
                break;
            default:
                break;
        }
    } while(true);
    return 0;
}
