#include <iostream> 
#include <fstream> // для работы с txt файлом
#include <string>
#include <conio.h>
#include <iomanip> // для "setw()"
#include <algorithm> // для "find()"

using namespace std;

/*
    Разработать программу ведения и использование базы данных с использованием структурных переменных и сохранением данных в плоском (без использования форматирования) файле.
    Для этого создать шаблон структуры, создать набор функций для работы с массивом структурных переменных. В структурной переменной предусмотреть способ отметки ее как не содержащей данных (т.е. "пустой"). 

    Разработать функции в соответствии с ниже приводимым перечнем:
    1.  Очистка структурных переменных (отметка переменной как не содержащей данных). Функция должна получать в качестве параметра индекс массива.
    2.  Поиск свободной структурной переменной. Функция должна возвращать индекс первого свободного элемента в массиве структур.
    3.  Ввод элементов (полей) структуры с клавиатуры. В качестве параметра в функцию должен передаваться индекс элемента массива.
    4.  Вывод элементов (полей) структуры на монитор. В функцию должен передаваться индекс элемента массива.
    5.  Вывод на экран всех заполненных элементов массива структур.
    6.  Поиск в массиве структур элемента с заданным значением поля или с наиболее близким к нему по значению. Предусмотреть возможность задания одного числового значения и одного строкового.
    7.  Поиск в массиве структуры с минимальным значением заданного поля. Поле должно передаваться в поле числом, обозначающим номер поля в структуре.
    8.  Сортировка массива структур в порядке возрастания заданного поля (при сортировке можно использовать тот факт, что в С++ разрешается присваивание структурированных переменных);
    9.  Сортировка массива структур в порядке убывания заданного поля (при сортировке можно использовать тот факт, что в С++ разрешается присваивание структурированных переменных);
    10. Функция чтения файла с содержимым базы данных (массива структурных элементов).
    11. Функция записи в файл содержимого базы данных (массива структурных элементов).
*/

class Processing {
public:
    struct Date {
        int day = 0;
        int month = 0;
        int year = 0;
    };

    struct Note {
        int page_number = 0;
        int string_number = 0;
        string text = "x";
        Date d;
        // Булева переменная - отметка переменной как не содержащей данных
        bool isClear = true;
    };

    // Создаём массив структур, в который можно поместить до 15 записей
    Note n[15];

    // Функция очистки поля
    void clear(int i) {
        n[i].page_number = 0;
        n[i].string_number = 0;
        n[i].text = "x";
        n[i].d.day = 0;
        n[i].d.month = 0;
        n[i].d.year = 0;
        n[i].isClear = true;
    }

    // Функция проверки на "чистоту" поля
    int isClear(int i) {
        if (n[i].isClear == true) {
            return 1;
        }
        return 0;
    }

    // Функция записи конкретного поля
    void input_item(int i, int pn, int sn, string t, int d, int m, int y) {
        n[i].page_number = pn;
        n[i].string_number = sn;
        n[i].text = t;
        n[i].d.day = d;
        n[i].d.month = m;
        n[i].d.year = y;
        n[i].isClear = false;
    }

    // Функция вывода конкретного поля
    void output_item(int i) {
        cout << setiosflags(ios::left) 
             << " | N " << setw(3) << i
             << " | " << setw(4) << n[i].page_number
             << " | " << setw(4) << n[i].string_number <<  " | " << setw(25) << n[i].text
             << " | " << n[i].d.day << "/" << n[i].d.month << "/" << n[i].d.year << " | " << endl;
    }

    // Функция вывода всех заполненных полей
    void output_all_items() {
        for (int i = 0; i < 15; i++) {
            if (n[i].isClear != true) {
                cout << setiosflags(ios::left)
                    << " | N " << setw(3) << i
                    << " | " << setw(4) << n[i].page_number
                    << " | " << setw(4) << n[i].string_number << " | " << setw(25) << n[i].text
                    << " | " << n[i].d.day << "/" << n[i].d.month << "/" << n[i].d.year << " | " << endl;
            }
        }
    }

    // Функция поиска записи по тексту записи
    void search_by_str(string t) {
        cout << "Results: " << endl;
        for (int i = 0; i < 15; i++) {
            if (n[i].text.find(t) != std::string::npos) {
                output_item(i);
            }
        }
    }

    // Функция поиска минимальной записи
    int min_search(char ch) {
        int min = 999999, temp = 0;
        switch (ch) {
        case('p'):
            for (int i = 0; i < 15; i++) {
                if ((n[i].page_number < min) && (n[i].isClear == false)) {
                    min = n[i].page_number;
                    temp = i;
                }
            }
            return(temp);
            break;

        case('s'):
            for (int i = 0; i < 15; i++) {
                if ((n[i].string_number < min) && (n[i].isClear == false)) {
                    min = n[i].string_number;
                    temp = i;
                }
            }
            return(temp);
            break;
        }
    return 0;
    }

    // Функция сортировки по возрастанию и убыванию номера страницы
    void sort(char ch) {
        Note temp;
        switch (ch) {
        // по возрастанию
        case('i'):
            // Сортировка "пузырьком"
            for (int i = 1; i < 15 - 1; i++) {
                for (int t = 0; t < 15 - i; t++) {
                    if (n[t].page_number > n[t + 1].page_number) {
                        temp = n[t];
                        n[t] = n[t + 1];
                        n[t + 1] = temp;
                    }
                }
            }
            break;
        // по убыванию
        case('d'):
            // Сортировка "пузырьком"
            for (int i = 0; i < 15 - 1; i++) {
                for (int t = i + 1; t < 15; t++) {
                    if (n[i].page_number < n[t].page_number) {
                        temp = n[t];
                        n[t] = n[i];
                        n[i] = temp;
                    }
                }
            }
            break;
        }
    }

    // Функция чтения txt файла
    void read_file() {
        ifstream fin("database.txt");
        if (fin.is_open()) {
            for (int i = 0; i < 15; i++) {
                fin >> n[i].page_number >> n[i].string_number
                    >> n[i].text >> n[i].d.day >> n[i].d.month >> n[i].d.year;
                // условие, чтобы не выводить в дальнейшем пустые ячейки
                if ((n[i].page_number > 0) || (n[i].string_number > 0)) {
                    n[i].isClear = false;
                }
            }
            cout << endl << "Complete!" << endl;
        }
        else {
            cout << endl << "File not found!" << endl;
        }
        fin.close();
    }

    // Функция записи txt файла
    void write_file() {
        ofstream fout("database.txt");
        if (fout.is_open()) {
            for (int i = 0; i < 15; i++) {
                fout << n[i].page_number << ' ' << n[i].string_number << ' '
                    << n[i].text << ' ' << n[i].d.day << ' ' 
                    << n[i].d.month << ' ' << n[i].d.year << endl;
            }
            cout << endl << "Complete!" << endl;
        }
        else {
            cout << endl << "File not found!" << endl;
        }
        fout.close();
    }
};

int main() {
    Processing arr;
    // Переменная выбора для бесконечного цикла
    char choice;
    // Переменная для ввода номера поля
    int item;
    char v;
    // Переменные для ввода значений структуры
    int pn, sn;
    string t;
    // Переменные для ввода даты
    char slash;
    int d, m, y;

    do {
        cout << "--------------------------------------------------";
        cout << endl << "What do you want to do?" << endl;
        cout << "   1 - clear any array item;" << endl;
        cout << "   2 - return index of the first free item;" << endl;
        cout << "   3 - input an item;" << endl;
        cout << "   4 - output an item;" << endl;
        cout << "   5 - output all not clear items;" << endl;
        cout << "   6 - search by item;" << endl;
        cout << "   7 - search min item;" << endl;
        cout << "   8 - sort;" << endl;
        cout << "   r - read txt-file;" << endl;
        cout << "   w - write txt-file." << endl;
        cout << "Answer: "; 
        cin >> v; cout << endl;

        switch (v) {
        // Функция очистки определенного поля
        case '1':
            cout << "What number of item you want to clear? "; cin >> item;
            arr.clear(item);
            cout << endl << "The item has been cleared!" << endl;
            break;

        // Функция поиска первого свободного поля
        case '2':
            for (int i = 0; i < 15; i++) {
                if (arr.isClear(i) == true) {
                    cout << endl << "First clear item have index " << i << endl;
                    break;
                }
            }
            break;

        // Функция записи определенного поля
        case '3':
            cout << "What number of item you want to input? "; cin >> item;
            cout << "Page number: "; cin >> pn;
            cout << "String number: "; cin >> sn;
            cout << "Text: "; cin.ignore(); getline(cin, t);
            cout << "Date (dd/mm/yy): "; cin >> d >> slash >> m >> slash >> y;
            arr.input_item(item, pn, sn, t, d, m, y);
            cout << endl << "Item has been recorded!" << endl;
            break;

        // Функция вывода определенного поля на экран
        case '4':
            cout << "What number of item you want to output? "; cin >> item;
            arr.output_item(item);
            break;

        // Функция вывода всех заполненных полей
        case '5':
            arr.output_all_items();
            break;

        // Функция поиска элемента с заданным значением
        case '6':
            cout << "Enter string for search: ";
            cin >> t;
            arr.search_by_str(t);
            break;
        
        // Функция поиска минимального значения одного из полей
        case '7':
            cout << "Search min by what column you want to do? ((1)age number, (2)tring number) ";
            choice = getch(); cout << endl;
            arr.output_item(arr.min_search(choice));
            break;

        // Функция сортировки по возрастанию и убыванию номера страницы
        case '8':
            cout << "Sorting page numbers by (i)ncreasing or (d)ecreasing? ";
            choice = getch(); cout << endl;
            arr.sort(choice);
            arr.output_all_items();
            break;

        // Функция по чтению txt файла
        case 'r':
            arr.read_file();
            break;

        // Функция по записи txt файла
        case 'w':
            arr.write_file();
            break;
        }

        cout << "Continue? (y/n) "; 
        cin >> choice; cout << endl;
    }
    while (choice == 'y');
    return 0;
}
