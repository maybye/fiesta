#include <iostream>
#include <string>
using namespace std;

template <typename T>
class List
{
    
public:
    List();
    ~List();
    
    void clear();
    void pop_front ();
    void push_back(T data);
    int GetSize() {return size;};
    void push_front(T data);
    void insert(T value, int index);
    void removeAt (int index);
    void pop_back();
    
    T& operator[](const int index);

private:
    
    
    
    template <typename N>
    class Node
    {
    public:
        Node *pNext;
        N data;
        
        Node (N data = N(), Node *pNext = nullptr)
        {
            this->data = data;
            this->pNext = pNext;
        }
    };
    int size;
    Node<T> *head;
};

 template <typename T>
 List<T>::List()
 {
    size = 0;
    head = nullptr;
 }
 
 template <typename T>
 List<T>::~List()
 {
    cout << "хуяк" << endl;
    clear();
 }
 

 
 template <typename T>
 void List<T>::clear()
 {
     while (size)
     {
        pop_front();
     }
 }
 
 
 template <typename T>
 void List<T>::pop_front()
 {
    Node<T> *temp = head;
    head = head -> pNext;
    delete temp;
    size --;
 }
 
 template <typename T>
 void List<T>::pop_back()
 {
    removeAt(size-1);
 }
 
  template <typename T>
  void List<T>::push_back(T data)
  {
      if (head == nullptr)
      {
          head = new Node<T>(data);
      }
      else
      {
          Node<T> *current = this -> head;
          while (current -> pNext != nullptr)
          {
              current = current -> pNext;
          }
          current -> pNext = new Node<T>(data);
         
      }
      size++;
  }
  
  template <typename T>
  T& List<T>::operator[](const int index)
  {
     int counter = 0;
     Node<T> *current = this -> head;
     while (current!= nullptr)
     {
        if (counter == index)
        {
            return current->data;
        }
        current = current-> pNext;
        counter++;
     }
  }
  
 template <typename T>
 void List<T>::push_front(T data)
 {
    head = new Node<T>(data,head);
    size++;
 }
 
 template <typename T>
 void List <T>:: insert(T value, int index)
 {
     if (index==0)
     {
         push_front(value);
     }
     else
     {
         
        Node<T> *previous = this->head;
    
        for (int i; i < index-1; i++)
        {
            previous = previous -> pNext;
        }
        
        previous -> pNext = new Node<T>(value, previous->pNext);
        size++;
     }
 }
 
 template <typename T>
 void List<T>:: removeAt (int index)
 {
     if (index == 0)
     {
         pop_front();
     }
     else
     {
         Node<T> *previous = this -> head;
         for (int i=0; i < index -1; i++)
         {
             previous = previous -> pNext;
         }
         Node<T> *toDelete = previous -> pNext;
         previous -> pNext = toDelete-> pNext;
         delete toDelete;
         size --;
     }
 }
 
 
 int main()
 {
     List<int> list;
     list.push_back(10);
     list.push_front (44);
     list.push_back(900);
     
     
     for (int i = 0; i<list.GetSize(); i++)
     {
     cout << list[i] << endl;
     }
     cout << endl;
     
     cout << "происходит вставка" << endl;
     
     list.insert(88, 1);
     
          for (int i = 0; i<list.GetSize(); i++)
        {
            cout << list[i] << endl;
        }
        cout << endl;
     
     cout << "вставка произошла" << endl;
     
     cout << "происходит удаление" << endl;
     
     list. removeAt(1);
     
          for (int i = 0; i<list.GetSize(); i++)
        {
            cout << list[i] << endl;
        }
        cout << endl;
     
     cout << "удаление произошло" << endl;
     
     /*list.clear();
     
     for (int i = 0; i <list.GetSize(); i++)
     {
         cout << list[i] << endl;
        
     }
      cout<< list.GetSize() << endl;*/
     return 0;
 }
 
 
 
